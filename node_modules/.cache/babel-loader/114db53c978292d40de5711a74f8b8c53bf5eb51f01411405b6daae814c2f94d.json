{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8001/v1';\nclass ApiService {\n  // Create a new room\n  async createRoom(roomId, roomName, userName) {\n    try {\n      console.log('Creating room with:', {\n        roomId,\n        roomName,\n        userName\n      });\n      const response = await fetch(`${API_BASE_URL}/room`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          roomName,\n          userName\n        })\n      });\n      console.log('Create room response status:', response.status);\n      console.log('Create room response ok:', response.ok);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Create room response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error creating room:', error);\n      throw error;\n    }\n  }\n\n  // Join an existing room\n  async joinRoom(roomId, userName) {\n    try {\n      console.log('Joining room with:', {\n        roomId,\n        userName\n      });\n      const response = await fetch(`${API_BASE_URL}/room/${roomId}?name=${encodeURIComponent(userName)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Join room response status:', response.status);\n      console.log('Join room response ok:', response.ok);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Join room response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error joining room:', error);\n      throw error;\n    }\n  }\n\n  // Get all messages from a room\n  async getRoomMessages(roomId, page = 0, size = 20) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/room/${roomId}/messages?page=${page}&size=${size}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","createRoom","roomId","roomName","userName","console","log","response","fetch","method","headers","body","JSON","stringify","status","ok","Error","data","json","error","joinRoom","encodeURIComponent","getRoomMessages","page","size","apiService"],"sources":["/Users/lakshya.munna/Desktop/chat-room-app/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8001/v1';\n\nclass ApiService {\n  // Create a new room\n  async createRoom(roomId, roomName, userName) {\n    try {\n      console.log('Creating room with:', { roomId, roomName, userName });\n      const response = await fetch(`${API_BASE_URL}/room`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          roomId,\n          roomName,\n          userName\n        })\n      });\n\n      console.log('Create room response status:', response.status);\n      console.log('Create room response ok:', response.ok);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Create room response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error creating room:', error);\n      throw error;\n    }\n  }\n\n  // Join an existing room\n  async joinRoom(roomId, userName) {\n    try {\n      console.log('Joining room with:', { roomId, userName });\n      const response = await fetch(`${API_BASE_URL}/room/${roomId}?name=${encodeURIComponent(userName)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('Join room response status:', response.status);\n      console.log('Join room response ok:', response.ok);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Join room response data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error joining room:', error);\n      throw error;\n    }\n  }\n\n  // Get all messages from a room\n  async getRoomMessages(roomId, page = 0, size = 20) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/room/${roomId}/messages?page=${page}&size=${size}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  }\n}\n\nconst apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nclass WebSocketService {\n  constructor() {\n    this.client = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      console.log('Attempting to connect to WebSocket at http://localhost:8001/chat');\n      this.client = new Client({\n        webSocketFactory: () => {\n          console.log('Creating SockJS connection...');\n          return new SockJS('http://localhost:8001/chat');\n        },\n        connectHeaders: {},\n        debug: str => {\n          console.log('STOMP Debug:', str);\n        },\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        onConnect: frame => {\n          console.log('✅ Successfully connected to WebSocket:', frame);\n          this.connected = true;\n          resolve(frame);\n        },\n        onStompError: frame => {\n          console.error('❌ STOMP error:', frame.headers['message']);\n          console.error('Error details:', frame.body);\n          this.connected = false;\n          reject(new Error(`STOMP error: ${frame.headers['message']}`));\n        },\n        onWebSocketError: error => {\n          console.error('❌ WebSocket connection error:', error);\n          this.connected = false;\n          reject(new Error(`WebSocket error: ${error.message || error}`));\n        },\n        onDisconnect: frame => {\n          console.log('🔌 Disconnected from WebSocket:', frame);\n          this.connected = false;\n        },\n        onWebSocketClose: event => {\n          console.log('🔌 WebSocket connection closed:', event);\n          this.connected = false;\n        }\n      });\n\n      // Add timeout for connection attempt\n      const connectionTimeout = setTimeout(() => {\n        if (!this.connected) {\n          console.error('❌ WebSocket connection timeout');\n          this.client.deactivate();\n          reject(new Error('WebSocket connection timeout'));\n        }\n      }, 10000); // 10 second timeout\n\n      this.client.onConnect = frame => {\n        clearTimeout(connectionTimeout);\n        console.log('✅ Successfully connected to WebSocket:', frame);\n        this.connected = true;\n        resolve(frame);\n      };\n      try {\n        console.log('🔄 Activating WebSocket client...');\n        this.client.activate();\n      } catch (error) {\n        clearTimeout(connectionTimeout);\n        console.error('❌ Failed to activate WebSocket client:', error);\n        reject(error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.client && this.connected) {\n      // Unsubscribe from all subscriptions\n      this.subscriptions.forEach(subscription => {\n        subscription.unsubscribe();\n      });\n      this.subscriptions.clear();\n      this.client.deactivate();\n      this.connected = false;\n    }\n  }\n  subscribeToRoom(roomId, onMessageReceived) {\n    if (!this.connected || !this.client) {\n      console.error('WebSocket not connected');\n      return null;\n    }\n    const destination = `/topic/room/${roomId}`;\n\n    // Unsubscribe from previous subscription if exists\n    if (this.subscriptions.has(roomId)) {\n      this.subscriptions.get(roomId).unsubscribe();\n    }\n    const subscription = this.client.subscribe(destination, message => {\n      try {\n        const messageData = JSON.parse(message.body);\n        onMessageReceived(messageData);\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    });\n    this.subscriptions.set(roomId, subscription);\n    return subscription;\n  }\n  sendMessage(roomId, messageRequest) {\n    if (!this.connected || !this.client) {\n      console.error('WebSocket not connected');\n      return false;\n    }\n    try {\n      // Transform message to match backend MessageRequest format\n      const backendMessage = {\n        sender: messageRequest.userName,\n        content: messageRequest.message,\n        messageTime: messageRequest.timestamp\n      };\n      console.log('Sending message to room:', roomId, backendMessage);\n      this.client.publish({\n        destination: `/app/sendMessage/${roomId}`,\n        body: JSON.stringify(backendMessage)\n      });\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      return false;\n    }\n  }\n  isConnected() {\n    return this.connected;\n  }\n}\nconst webSocketService = new WebSocketService();\nexport default webSocketService;","map":{"version":3,"names":["Client","SockJS","WebSocketService","constructor","client","connected","subscriptions","Map","connect","Promise","resolve","reject","console","log","webSocketFactory","connectHeaders","debug","str","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","onStompError","error","headers","body","Error","onWebSocketError","message","onDisconnect","onWebSocketClose","event","connectionTimeout","setTimeout","deactivate","clearTimeout","activate","disconnect","forEach","subscription","unsubscribe","clear","subscribeToRoom","roomId","onMessageReceived","destination","has","get","subscribe","messageData","JSON","parse","set","sendMessage","messageRequest","backendMessage","sender","userName","content","messageTime","timestamp","publish","stringify","isConnected","webSocketService"],"sources":["/Users/lakshya.munna/Desktop/chat-room-app/src/services/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nclass WebSocketService {\n  constructor() {\n    this.client = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      console.log('Attempting to connect to WebSocket at http://localhost:8001/chat');\n      \n      this.client = new Client({\n        webSocketFactory: () => {\n          console.log('Creating SockJS connection...');\n          return new SockJS('http://localhost:8001/chat');\n        },\n        connectHeaders: {},\n        debug: (str) => {\n          console.log('STOMP Debug:', str);\n        },\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        onConnect: (frame) => {\n          console.log('✅ Successfully connected to WebSocket:', frame);\n          this.connected = true;\n          resolve(frame);\n        },\n        onStompError: (frame) => {\n          console.error('❌ STOMP error:', frame.headers['message']);\n          console.error('Error details:', frame.body);\n          this.connected = false;\n          reject(new Error(`STOMP error: ${frame.headers['message']}`));\n        },\n        onWebSocketError: (error) => {\n          console.error('❌ WebSocket connection error:', error);\n          this.connected = false;\n          reject(new Error(`WebSocket error: ${error.message || error}`));\n        },\n        onDisconnect: (frame) => {\n          console.log('🔌 Disconnected from WebSocket:', frame);\n          this.connected = false;\n        },\n        onWebSocketClose: (event) => {\n          console.log('🔌 WebSocket connection closed:', event);\n          this.connected = false;\n        }\n      });\n\n      // Add timeout for connection attempt\n      const connectionTimeout = setTimeout(() => {\n        if (!this.connected) {\n          console.error('❌ WebSocket connection timeout');\n          this.client.deactivate();\n          reject(new Error('WebSocket connection timeout'));\n        }\n      }, 10000); // 10 second timeout\n\n      this.client.onConnect = (frame) => {\n        clearTimeout(connectionTimeout);\n        console.log('✅ Successfully connected to WebSocket:', frame);\n        this.connected = true;\n        resolve(frame);\n      };\n\n      try {\n        console.log('🔄 Activating WebSocket client...');\n        this.client.activate();\n      } catch (error) {\n        clearTimeout(connectionTimeout);\n        console.error('❌ Failed to activate WebSocket client:', error);\n        reject(error);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.client && this.connected) {\n      // Unsubscribe from all subscriptions\n      this.subscriptions.forEach((subscription) => {\n        subscription.unsubscribe();\n      });\n      this.subscriptions.clear();\n      \n      this.client.deactivate();\n      this.connected = false;\n    }\n  }\n\n  subscribeToRoom(roomId, onMessageReceived) {\n    if (!this.connected || !this.client) {\n      console.error('WebSocket not connected');\n      return null;\n    }\n\n    const destination = `/topic/room/${roomId}`;\n    \n    // Unsubscribe from previous subscription if exists\n    if (this.subscriptions.has(roomId)) {\n      this.subscriptions.get(roomId).unsubscribe();\n    }\n\n    const subscription = this.client.subscribe(destination, (message) => {\n      try {\n        const messageData = JSON.parse(message.body);\n        onMessageReceived(messageData);\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    });\n\n    this.subscriptions.set(roomId, subscription);\n    return subscription;\n  }\n\n  sendMessage(roomId, messageRequest) {\n    if (!this.connected || !this.client) {\n      console.error('WebSocket not connected');\n      return false;\n    }\n\n    try {\n      // Transform message to match backend MessageRequest format\n      const backendMessage = {\n        sender: messageRequest.userName,\n        content: messageRequest.message,\n        messageTime: messageRequest.timestamp\n      };\n      \n      console.log('Sending message to room:', roomId, backendMessage);\n      this.client.publish({\n        destination: `/app/sendMessage/${roomId}`,\n        body: JSON.stringify(backendMessage)\n      });\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      return false;\n    }\n  }\n\n  isConnected() {\n    return this.connected;\n  }\n}\n\nconst webSocketService = new WebSocketService();\nexport default webSocketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}